// <auto-generated />
using System;
using DotNetCoreArchitecture.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotNetCoreArchitecture.Database.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20191223085048_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DotNetCoreArchitecture.Database.Tables.CatogriesTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemsInventoryTableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemsInventoryTableId");

                    b.ToTable("CatogriesTable");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Database.Tables.ItemsInventoryTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExist")
                        .HasColumnName("IsExist")
                        .HasColumnType("bit");

                    b.Property<string>("ItemDescription")
                        .HasColumnName("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnName("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxNum")
                        .HasColumnName("MaxNum")
                        .HasColumnType("int");

                    b.Property<int>("MinNum")
                        .HasColumnName("MinNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("InventoryTable");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.CatogryEntity", b =>
                {
                    b.Property<Guid>("CatogryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatogryId");

                    b.ToTable("CatogryItems");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Catogry.FoodCatogryEntity", b =>
                {
                    b.Property<Guid>("CatogryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("CatogryKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CatogryId");

                    b.ToTable("FoodCatogry");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Foods.FoodBrands", b =>
                {
                    b.Property<Guid>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CatogryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FoodCatogryEntityCatogryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("FoodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnName("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPlace")
                        .IsRequired()
                        .HasColumnName("OwnerPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserEntityUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FoodId");

                    b.HasIndex("FoodCatogryEntityCatogryId");

                    b.HasIndex("UserEntityUserId");

                    b.ToTable("FoodBrand");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.HistoryOrders.FoodOrderHistory", b =>
                {
                    b.Property<Guid>("OrderHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnName("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FoodBrandsOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsExpired")
                        .HasColumnName("status")
                        .HasColumnType("bit");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderHistoryId");

                    b.HasIndex("FoodBrandsOrderId");

                    b.ToTable("FoodOrderHistory");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Items.FoodBrandItems", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemName")
                        .HasColumnName("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnName("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemTypeCatogryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemTypeCatogryId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ItemTypeEntityItemTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("ItemTypeCatogryId1");

                    b.HasIndex("ItemTypeEntityItemTypeId");

                    b.ToTable("FoodBrandItems");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Items.ItemTypeCatogry", b =>
                {
                    b.Property<Guid>("ItemTypeCatogryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ItemTypeCatogryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CatogryDescription")
                        .IsRequired()
                        .HasColumnName("CatogryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatogryKey")
                        .IsRequired()
                        .HasColumnName("CatogryKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemTypeCatogryId");

                    b.ToTable("ItemTypeCatogryTables");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Items.ItemTypeEntity", b =>
                {
                    b.Property<Guid>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemKey")
                        .IsRequired()
                        .HasColumnName("ItemKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypeEntityTables");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.OrderStatus.FoodOrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnName("status")
                        .HasColumnType("bit");

                    b.HasKey("OrderStatusId");

                    b.ToTable("FoodOrderStatus");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Orders.FoodBrandOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FoodBrandsFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FoodOrderStatusOrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnName("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatusId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserEntityUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("FoodBrandsFoodId");

                    b.HasIndex("FoodOrderStatusOrderStatusId");

                    b.HasIndex("UserEntityUserId");

                    b.ToTable("FoodBrandOrder");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.elasticsearch.ElasticLoggly", b =>
                {
                    b.Property<Guid>("LogglyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClazzName")
                        .IsRequired()
                        .HasColumnName("ClazzName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FoodBrandOrderOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FoodBrandsFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FoodEntityLogText")
                        .HasColumnName("FoodEntityLogText")
                        .HasColumnType("bit");

                    b.Property<string>("FoodId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FoodOrderLogText")
                        .HasColumnName("FoodOrderEntityLog")
                        .HasColumnType("bit");

                    b.Property<string>("LogText")
                        .IsRequired()
                        .HasColumnName("LogText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnName("MethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogglyId");

                    b.HasIndex("FoodBrandOrderOrderId");

                    b.HasIndex("FoodBrandsFoodId");

                    b.ToTable("ElasticLoggly");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.HallEntity", b =>
                {
                    b.Property<Guid>("HallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HallName")
                        .IsRequired()
                        .HasColumnName("HallName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HallId");

                    b.ToTable("HallReservation");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.HallReservationEntity", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("enddate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HallEntitiesHallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HallId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnName("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("startdate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationId");

                    b.HasIndex("HallEntitiesHallId");

                    b.ToTable("HallReservationDateSchedule");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.ItemEntity", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CatogriesCatogryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CatogryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnName("CreateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExist")
                        .HasColumnName("IsExist")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnName("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxNum")
                        .IsRequired()
                        .HasColumnName("MaxNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinNum")
                        .IsRequired()
                        .HasColumnName("MinNum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("CatogriesCatogryId");

                    b.ToTable("ItemInventory","User");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.UserEntity", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users","User");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            Roles = 3,
                            Status = 1
                        });
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.UserLogEntity", b =>
                {
                    b.Property<long>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserLogId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersLogs","User");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Database.Tables.CatogriesTable", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Database.Tables.ItemsInventoryTable", null)
                        .WithMany("CatogriesTables")
                        .HasForeignKey("ItemsInventoryTableId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Foods.FoodBrands", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.Catogry.FoodCatogryEntity", "FoodCatogryEntity")
                        .WithMany()
                        .HasForeignKey("FoodCatogryEntityCatogryId");

                    b.HasOne("DotNetCoreArchitecture.Domain.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityUserId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.HistoryOrders.FoodOrderHistory", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.Orders.FoodBrandOrder", "FoodBrands")
                        .WithMany()
                        .HasForeignKey("FoodBrandsOrderId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Items.FoodBrandItems", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.Items.ItemTypeCatogry", "ItemTypeCatogry")
                        .WithMany()
                        .HasForeignKey("ItemTypeCatogryId1");

                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.Items.ItemTypeEntity", "ItemTypeEntity")
                        .WithMany()
                        .HasForeignKey("ItemTypeEntityItemTypeId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.Orders.FoodBrandOrder", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.Foods.FoodBrands", "FoodBrands")
                        .WithMany()
                        .HasForeignKey("FoodBrandsFoodId");

                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.OrderStatus.FoodOrderStatus", "FoodOrderStatus")
                        .WithMany()
                        .HasForeignKey("FoodOrderStatusOrderStatusId");

                    b.HasOne("DotNetCoreArchitecture.Domain.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityUserId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.FastFood.elasticsearch.ElasticLoggly", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.Orders.FoodBrandOrder", "FoodBrandOrder")
                        .WithMany()
                        .HasForeignKey("FoodBrandOrderOrderId");

                    b.HasOne("DotNetCoreArchitecture.Domain.FastFood.Foods.FoodBrands", "FoodBrands")
                        .WithMany()
                        .HasForeignKey("FoodBrandsFoodId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.HallReservationEntity", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.HallEntity", "HallEntities")
                        .WithMany()
                        .HasForeignKey("HallEntitiesHallId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.ItemEntity", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.CatogryEntity", "Catogries")
                        .WithMany()
                        .HasForeignKey("CatogriesCatogryId");
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.UserEntity", b =>
                {
                    b.OwnsOne("DotNetCoreArchitecture.Domain.Email", "Email", b1 =>
                        {
                            b1.Property<long>("UserEntityUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnName("Email")
                                .HasColumnType("nvarchar(300)")
                                .HasMaxLength(300);

                            b1.HasKey("UserEntityUserId");

                            b1.HasIndex("Address")
                                .IsUnique()
                                .HasFilter("[Email] IS NOT NULL");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");

                            b1.HasData(
                                new
                                {
                                    UserEntityUserId = 1L,
                                    Address = "administrator@administrator.com"
                                });
                        });

                    b.OwnsOne("DotNetCoreArchitecture.Domain.FullName", "FullName", b1 =>
                        {
                            b1.Property<long>("UserEntityUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnName("Name")
                                .HasColumnType("nvarchar(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasColumnName("Surname")
                                .HasColumnType("nvarchar(200)")
                                .HasMaxLength(200);

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");

                            b1.HasData(
                                new
                                {
                                    UserEntityUserId = 1L,
                                    Name = "Administrator",
                                    Surname = "Administrator"
                                });
                        });

                    b.OwnsOne("DotNetCoreArchitecture.Domain.SignIn", "SignIn", b1 =>
                        {
                            b1.Property<long>("UserEntityUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Login")
                                .IsRequired()
                                .HasColumnName("Login")
                                .HasColumnType("nvarchar(100)")
                                .HasMaxLength(100);

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnName("Password")
                                .HasColumnType("nvarchar(500)")
                                .HasMaxLength(500);

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasColumnName("Salt")
                                .HasColumnType("nvarchar(500)")
                                .HasMaxLength(500);

                            b1.HasKey("UserEntityUserId");

                            b1.HasIndex("Login")
                                .IsUnique()
                                .HasFilter("[Login] IS NOT NULL");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");

                            b1.HasData(
                                new
                                {
                                    UserEntityUserId = 1L,
                                    Login = "admin",
                                    Password = "O34uMN1Vho2IYcSM7nlXEqn57RZ8VEUsJwH++sFr0i3MSHJVx8J3PQGjhLR3s5i4l0XWUnCnymQ/EbRmzvLy8uMWREZu7vZI+BqebjAl5upYKMMQvlEcBeyLcRRTTBpYpv80m/YCZQmpig4XFVfIViLLZY/Kr5gBN5dkQf25rK8=",
                                    Salt = "79005744-e69a-4b09-996b-08fe0b70cbb9"
                                });
                        });
                });

            modelBuilder.Entity("DotNetCoreArchitecture.Domain.UserLogEntity", b =>
                {
                    b.HasOne("DotNetCoreArchitecture.Domain.UserEntity", "User")
                        .WithMany("UsersLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
